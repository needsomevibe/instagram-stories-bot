from instagrapi import Client
from keep_alive import keep_alive
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, LabeledPrice, Invoice, PreCheckoutQuery
from telegram.ext import PreCheckoutQueryHandler
import logging
import time
from datetime import datetime, timedelta
import os
import json
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from concurrent.futures import ThreadPoolExecutor
from queue import Queue
import threading
from functools import partial
import queue
import socket
import dns.resolver
import requests.packages.urllib3.util.connection as urllib3_cn
from keep_alive import keep_alive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                   level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('bot.log')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
session = requests.Session()
retry_strategy = Retry(
    total=3,
    backoff_factor=2,
    status_forcelist=[429, 500, 502, 503, 504],
)
adapter = HTTPAdapter(max_retries=retry_strategy)
session.mount("https://", adapter)
session.mount("http://", adapter)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = '8003575140:AAHeQbGBFrOmd-L_gvWqhR3jhG1RAgpn30Q'
INSTAGRAM_USERNAME = 'needsomev11be'
INSTAGRAM_PASSWORD = '5621456xasa'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Instagram
cl = Client()
cl.delay_range = [2, 5]
cl.request_timeout = 30
cl.download_timeout = 60

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∫—É–∫–∏
try:
    if os.path.exists('session.json'):
        cl.load_settings('session.json')
        if not cl.login_by_sessionid(cl.sessionid):
            raise Exception("Invalid session")
    else:
        cl.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
        cl.dump_settings('session.json')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    cl.get_timeline_feed()
    logger.info("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Instagram")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram: {str(e)}")
    if os.path.exists('session.json'):
        os.remove('session.json')
    cl.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
    cl.dump_settings('session.json')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscriptions = {}  # {user_id: [instagram_usernames]}
last_posts = {}  # {user_id: {instagram_username: last_post_date}}
last_stories = {}  # {user_id: {instagram_username: last_story_id}}

# –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_WORKERS = 4
QUEUE_SIZE = 100
RETRY_DELAY = 5
MAX_RETRIES = 3
task_queue = Queue(maxsize=QUEUE_SIZE)
executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)

# –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
data_lock = threading.Lock()

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
PROVIDER_TOKEN = '1744374395:TEST:5621456xasa'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
CURRENCY = 'USD'

# –û–±–Ω–æ–≤–∏–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω, –¥–æ–±–∞–≤–∏–≤ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
SUBSCRIPTION_PRICES = {
    '1month': {
        'price': 149,
        'title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü',
        'description': '30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é Instagram –∏—Å—Ç–æ—Ä–∏–π',
    },
    '3months': {
        'price': 349,
        'title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (-25%)',
        'description': '90 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é Instagram –∏—Å—Ç–æ—Ä–∏–π',
    },
    '6months': {
        'price': 599,
        'title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (-36%)',
        'description': '180 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é Instagram –∏—Å—Ç–æ—Ä–∏–π',
    },
    '1year': {
        'price': 999,
        'title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥ (-48%)',
        'description': '365 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é Instagram –∏—Å—Ç–æ—Ä–∏–π',
    }
}

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
user_subscriptions_data = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

def create_invoice(plan):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    plan_data = SUBSCRIPTION_PRICES[plan]
    return Invoice(
        title=plan_data['title'],
        description=plan_data['description'],
        start_parameter=f'sub_{plan}',
        currency=CURRENCY,
        prices=[LabeledPrice(plan_data['label'], plan_data['price'] * 100)]  # –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞
dns_resolver = dns.resolver.Resolver()
dns_resolver.nameservers = ['8.8.8.8', '8.8.4.4']  # Google DNS

def get_instagram_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ Instagram"""
    try:
        answers = dns_resolver.resolve('i.instagram.com', 'A')
        return str(answers[0])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP Instagram: {str(e)}")
        return None

def setup_instagram_client():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Instagram"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
        session = requests.Session()
        retry_strategy = Retry(
            total=5,
            backoff_factor=0.5,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("https://", adapter)
        session.mount("http://", adapter)

        # –ü–æ–ª—É—á–∞–µ–º IP Instagram
        instagram_ip = get_instagram_ip()
        if instagram_ip:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω IP –∞–¥—Ä–µ—Å Instagram: {instagram_ip}")
            session.headers.update({'Host': 'i.instagram.com'})
            session.mount(f"https://{instagram_ip}", adapter)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        cl.delay_range = [1, 3]
        cl.request_timeout = 10
        cl.download_timeout = 20
        cl.session = session

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if os.path.exists('session.json'):
            cl.load_settings('session.json')
            if not cl.login_by_sessionid(cl.sessionid):
                raise Exception("Invalid session")
        else:
            cl.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
            cl.dump_settings('session.json')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        cl.get_timeline_feed()
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Instagram")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        initialize_files()
        load_user_data()
        load_subscription_data()
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
        global user_subscriptions, last_posts, last_stories, user_subscriptions_data
        if not user_subscriptions:
            user_subscriptions = {}
        if not last_posts:
            last_posts = {}
        if not last_stories:
            last_stories = {}
        if not user_subscriptions_data:
            user_subscriptions_data = {}
            
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ Instagram: {str(e)}")
        if os.path.exists('session.json'):
            os.remove('session.json')
        return False

def log_user_action(user_id, action, details=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = f"user_{user_id}"
    if details:
        logger.info(f"üë§ {username} - {action}: {details}")
    else:
        logger.info(f"üë§ {username} - {action}")

def log_bot_action(action, details=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞"""
    if details:
        logger.info(f"ü§ñ Bot - {action}: {details}")
    else:
        logger.info(f"ü§ñ Bot - {action}")

def load_user_data():
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global user_subscriptions, last_posts, last_stories
    
    with data_lock:
        try:
            if os.path.exists('user_data.json') and os.path.getsize('user_data.json') > 0:
                with open('user_data.json', 'r') as f:
                    data = json.load(f)
                    user_subscriptions = data.get('subscriptions', {})
                    last_posts = data.get('posts', {})
                    last_stories = data.get('stories', {})
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                user_subscriptions = {}
                last_posts = {}
                last_stories = {}
                save_user_data()
                logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            user_subscriptions = {}
            last_posts = {}
            last_stories = {}
            # –ò –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö
            try:
                save_user_data()
            except Exception as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(save_error)}")

def save_user_data():
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with data_lock:
        try:
            data = {
                'subscriptions': user_subscriptions,
                'posts': last_posts,
                'stories': last_stories
            }
            with open('user_data.json', 'w') as f:
                json.dump(data, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

def load_subscription_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    global user_subscriptions_data
    try:
        if os.path.exists('subscriptions.json'):
            with open('subscriptions.json', 'r') as f:
                user_subscriptions_data = json.load(f)
            logger.info("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            user_subscriptions_data = {}
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫")
            save_subscription_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {str(e)}")
        user_subscriptions_data = {}

def save_subscription_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    try:
        with open('subscriptions.json', 'w') as f:
            json.dump(user_subscriptions_data, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {str(e)}")

def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = str(user_id)
        if user_id not in user_subscriptions_data:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return False
        
        expires = datetime.fromtimestamp(user_subscriptions_data[user_id]['expires'])
        is_active = expires > datetime.now()
        is_trial = user_subscriptions_data[user_id].get('is_trial', False)
        
        if is_active:
            if is_trial:
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expires}")
            else:
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expires}")
        else:
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è {user_id}")
            
        return is_active
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {str(e)}")
        return False

def get_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 149 ‚≠êÔ∏è", callback_data='sub_1month')],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 349 ‚≠êÔ∏è (-25%)", callback_data='sub_3months')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 599 ‚≠êÔ∏è (-36%)", callback_data='sub_6months')],
        [InlineKeyboardButton("1 –≥–æ–¥ - 999 ‚≠êÔ∏è (-48%)", callback_data='sub_1year')],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def show_subscription_info(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    if isinstance(update, CallbackQuery):
        user_id = str(update.from_user.id)
        chat_id = update.message.chat_id
    else:
        user_id = str(update.effective_user.id)
        chat_id = update.message.chat_id

    try:
        if check_subscription(user_id):
            expires = datetime.fromtimestamp(user_subscriptions_data[user_id]['expires'])
            days_left = (expires - datetime.now()).days
            plan = user_subscriptions_data[user_id]['plan']
            is_trial = user_subscriptions_data[user_id].get('is_trial', False)
            
            if is_trial:
                message = (
                    f"‚úÖ *–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    f"üìÜ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires.strftime('%d.%m.%Y')}\n\n"
                    f"üî• –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞,\n"
                    f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤:"
                )
            else:
                message = (
                    f"‚úÖ *–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*\n"
                    f"üìÖ –¢–∞—Ä–∏—Ñ: {plan}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    f"üìÜ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires.strftime('%d.%m.%Y')}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:"
                )
        else:
            message = (
                "üéüÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ*\n\n"
                "‚Ä£ *1 –º–µ—Å—è—Ü* (30 –¥–Ω–µ–π) ‚Äî 149 ‚≠êÔ∏è\n"
                "  ( ~ $2.99 / 280‚ÇΩ )\n\n"
                "‚Ä£ *3 –º–µ—Å—è—Ü–∞* (90 –¥–Ω–µ–π) ‚Äî 447 349 ‚≠êÔ∏è\n"
                "  ( ~ $6.99 / 640‚ÇΩ, —ç–∫–æ–Ω–æ–º–∏—è 25% )\n"
                "  ( ~ $2.33 / 210‚ÇΩ –≤ –º–µ—Å—è—Ü )\n\n"
                "‚Ä£ *6 –º–µ—Å—è—Ü–µ–≤* (180 –¥–Ω–µ–π) ‚Äî 894 599 ‚≠êÔ∏è\n"
                "  ( ~ $11.98 / 1100‚ÇΩ, —ç–∫–æ–Ω–æ–º–∏—è 36% )\n"
                "  ( ~ $1.99 / 180‚ÇΩ –≤ –º–µ—Å—è—Ü )\n\n"
                "‚Ä£ *1 –≥–æ–¥* (365 –¥–Ω–µ–π) ‚Äî 1788 999 ‚≠êÔ∏è\n"
                "  ( ~ $19.99 / 1800‚ÇΩ, —ç–∫–æ–Ω–æ–º–∏—è 48% )\n"
                "  ( ~ $1.67 / 150‚ÇΩ –≤ –º–µ—Å—è—Ü )\n\n"
                "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars\n"
                "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
                "üí° –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã: @PremiumBot"
            )
        
        if isinstance(update, CallbackQuery):
            update.edit_message_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=get_subscription_keyboard()
            )
        else:
            update.message.reply_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {str(e)}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"
        if isinstance(update, CallbackQuery):
            update.edit_message_text(text=error_text, reply_markup=get_back_to_menu_keyboard())
        else:
            update.message.reply_text(text=error_text, reply_markup=get_back_to_menu_keyboard())

def get_main_menu_keyboard():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data='list_subscriptions')],
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏", callback_data='load_stories')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("üíµ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subscription_info')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
    return InlineKeyboardMarkup(keyboard)

def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    log_user_action(user_id, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = (user_id not in user_subscriptions) and (user_id not in user_subscriptions_data)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {is_new_user}")
    
    if is_new_user:
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        user_subscriptions[user_id] = []
        last_posts[user_id] = {}
        last_stories[user_id] = {}
        save_user_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π
        expires = datetime.now() + timedelta(days=7)
        with data_lock:
            user_subscriptions_data[user_id] = {
                'expires': expires.timestamp(),
                'plan': 'trial',
                'is_trial': True
            }
            save_subscription_data()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Monitor Bot!\n\n"
            "üéÅ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ *–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π*!\n\n"
            "üîç –ë–æ—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö:\n"
            "üì∏ –ü–æ—Å—Ç–∞—Ö\n"
            "üé• –ò—Å—Ç–æ—Ä–∏—è—Ö\n\n"
            "‚ùóÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        log_bot_action("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", f"user_id: {user_id}")
    else:
        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Monitor Bot!\n\n"
            "üîç –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö:\n"
            "üì∏ –ü–æ—Å—Ç–∞—Ö\n"
            "üé• –ò—Å—Ç–æ—Ä–∏—è—Ö\n\n"
            "‚ùóÔ∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Instagram, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

    update.message.reply_text(
        text=welcome_message,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    message = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/add username - –î–æ–±–∞–≤–∏—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/remove username - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/loadstories - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ùóÔ∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"
    )
    update.message.reply_text(message, parse_mode='Markdown')

def get_user_id_by_username(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ user_id –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cl.user_id_from_username(username)
    return cl.user_id_from_username(username)

def get_stories(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = cl.user_id_from_username(username)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω user_id {user_id} –¥–ª—è {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        try:
            stories = cl.user_stories(user_id)
            if stories:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(stories)} –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è {username}")
                return stories
            else:
                logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è {username}: {str(e)}")
            return []
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ user_id –¥–ª—è {username}: {str(e)}")
        return []

def download_and_send_story(story, username, user_id, temp_dir, context):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é
        if user_id in last_stories and username in last_stories[user_id]:
            if story.pk in last_stories[user_id][username]:
                log_bot_action("–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", f"story_id: {story.pk}, –∞–∫–∫–∞—É–Ω—Ç: {username}")
                return False
        
        log_bot_action("–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", f"story_id: {story.pk}, –∞–∫–∫–∞—É–Ω—Ç: {username}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)

        file_path = os.path.join(temp_dir, f"story_{story.pk}")
        
        try:
            if story.media_type == 1:  # –§–æ—Ç–æ
                file_path += ".jpg"
                url = story.thumbnail_url
            else:  # –í–∏–¥–µ–æ
                file_path += ".mp4"
                url = story.video_url

            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                log_bot_action("–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª", f"story_id: {story.pk}, —Ä–∞–∑–º–µ—Ä: {len(response.content)}")
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º API
                log_bot_action("–ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—é API", f"story_id: {story.pk}")
                cl.story_download(story.pk, folder=temp_dir)

        except Exception as e:
            log_bot_action("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏", f"story_id: {story.pk}, –æ—à–∏–±–∫–∞: {str(e)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
            log_bot_action("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", f"story_id: {story.pk}, —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            if story.media_type == 1:
                context.bot.send_photo(
                    chat_id=user_id,
                    photo=open(file_path, 'rb'),
                    caption=f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç @{username}"
                )
            else:
                context.bot.send_video(
                    chat_id=user_id,
                    video=open(file_path, 'rb'),
                    caption=f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç @{username}"
                )
            log_bot_action("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", f"story_id: {story.pk}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")

            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ç–æ—Ä–∏–∏
            if user_id not in last_stories:
                last_stories[user_id] = {}
            if username not in last_stories[user_id]:
                last_stories[user_id][username] = set()
            last_stories[user_id][username].add(story.pk)
            save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            
            return True
        except Exception as e:
            log_bot_action("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", f"story_id: {story.pk}, –æ—à–∏–±–∫–∞: {str(e)}")
            return False
        finally:
            if os.path.exists(file_path):
                os.remove(file_path)
                
    except Exception as e:
        log_bot_action("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"story_id: {story.pk}, –æ—à–∏–±–∫–∞: {str(e)}")
        return False

def add_account(update, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    if len(context.args) < 1:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram\n"
                                "–ü—Ä–∏–º–µ—Ä: /add username")
        return

    user_id = str(update.effective_user.id)
    if not check_subscription(user_id):
        update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞",
            reply_markup=get_subscription_keyboard()
        )
        return

    username = context.args[0].lower()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if username in user_subscriptions.get(user_id, []):
            update.message.reply_text(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç @{username} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = update.message.reply_text(f"üîÑ –î–æ–±–∞–≤–ª—è—é –∞–∫–∫–∞—É–Ω—Ç @{username}...")
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            user_id_inst = cl.user_id_from_username(username)
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç @{username}")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–æ–¥–ø–∏—Å–∫–∏
        if user_id not in user_subscriptions:
            user_subscriptions[user_id] = []
        user_subscriptions[user_id].append(username)
        save_user_data()
        
        status_message.edit_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nüîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        def load_initial_stories():
            try:
                stories = get_stories(username)
                if stories:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID –∏—Å—Ç–æ—Ä–∏–π –±–µ–∑ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
                    if user_id not in last_stories:
                        last_stories[user_id] = {}
                    last_stories[user_id][username] = set(str(story.pk) for story in stories)
                    save_user_data()
                    
                    status_message.edit_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        f"üì± –ù–∞–π–¥–µ–Ω–æ {len(stories)} –∏—Å—Ç–æ—Ä–∏–π\n"
                        "üîÑ –ù–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    )
                else:
                    status_message.edit_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π: {str(e)}")
                status_message.edit_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
                    "üîÑ –ù–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=load_initial_stories, daemon=True).start()

    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")

def remove_account(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    if len(context.args) < 1:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram\n"
                                "–ü—Ä–∏–º–µ—Ä: /remove username")
        return

    username = context.args[0].lower()
    user_id = str(update.effective_user.id)

    if username in user_subscriptions.get(user_id, []):
        user_subscriptions[user_id].remove(username)
        save_user_data()
        update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
    else:
        update.message.reply_text(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")

def list_subscriptions(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = str(update.effective_user.id)
    subscriptions = user_subscriptions.get(user_id, [])
    
    if not subscriptions:
        message = "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
    else:
        message = "üìã *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
        for i, username in enumerate(subscriptions, 1):
            message += f"{i}. @{username}\n"
        message += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove username"
    
    update.message.reply_text(message, parse_mode='Markdown')

def check_instagram_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram"""
    try:
        session.get("https://www.instagram.com", timeout=10)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram: {str(e)}")
        return False

def process_user_stories(user_id, username, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stories = get_stories(username)
        if stories:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(stories)} –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è {username}")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
            current_story_ids = set(str(story.pk) for story in stories)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if user_id not in last_stories:
                last_stories[user_id] = {}
            if username not in last_stories[user_id]:
                last_stories[user_id][username] = set()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
            sent_story_ids = set(last_stories[user_id][username])
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
            new_story_ids = current_story_ids - sent_story_ids
            
            if new_story_ids:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {username}: {new_story_ids}")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                temp_dir = f"temp_{user_id}_{username}"
                os.makedirs(temp_dir, exist_ok=True)
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
                    for story in stories:
                        story_id = str(story.pk)
                        if story_id in new_story_ids:
                            try:
                                # –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                                download_and_send_story(story, username, user_id, temp_dir, context)
                                
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ {story_id}: {str(e)}")
                                continue
                            
                finally:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    if os.path.exists(temp_dir):
                        try:
                            os.rmdir(temp_dir)
                        except:
                            # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞, –æ—á–∏—â–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                            for file in os.listdir(temp_dir):
                                try:
                                    os.remove(os.path.join(temp_dir, file))
                                except:
                                    pass
                            try:
                                os.rmdir(temp_dir)
                            except:
                                pass
                            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–π: {str(e)}")

def worker():
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
    while True:
        task = task_queue.get()
        if task is None:
            break
        try:
            task()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        finally:
            task_queue.task_done()

def monitor_queue():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    while True:
        size = task_queue.qsize()
        if size > 0:
            logger.info(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {size}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def check_new_content(context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if not check_and_refresh_auth():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Instagram")
            return
            
        for user_id in user_subscriptions:
            if not check_subscription(user_id):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {user_id} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                continue
                
            for username in user_subscriptions[user_id]:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    user_info = cl.user_info_by_username(username)
                    if not user_info:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}")
                        continue
                        
                    stories = cl.user_stories(user_info.pk)
                    
                    if stories:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(stories)} –∏—Å—Ç–æ—Ä–∏–π —É {username}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
                        if user_id not in last_stories:
                            last_stories[user_id] = {}
                        if username not in last_stories[user_id]:
                            last_stories[user_id][username] = {}
                            
                        for story in stories:
                            story_id = str(story.pk)
                            if story_id not in last_stories[user_id][username]:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                                last_stories[user_id][username][story_id] = {
                                    'timestamp': datetime.now().timestamp(),
                                    'sent': False
                                }
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                                try:
                                    download_and_send_story(story, username, user_id, f"temp_{user_id}_{username}", context)
                                    last_stories[user_id][username][story_id]['sent'] = True
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
                                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {username}: {str(e)}")
                    continue
                    
        save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")

def send_post_notification(context, user_id, username, post):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ"""
    message = (
        f"üîî *–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç @{username}!*\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {post.caption[:100]}...\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {post.likes}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {post.comments}"
    )
    
    try:
        context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
        send_media(context, user_id, username, post)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

def send_story_notification(context, user_id, username, story_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        message = (
            f"üì± *–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç @{username}*\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {story_data['date'].strftime('%H:%M:%S')}\n"
            f"üìç –¢–∏–ø: {'–í–∏–¥–µ–æ' if story_data['is_video'] else '–§–æ—Ç–æ'}"
        )
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
        if os.path.exists(story_data['path']):
            try:
                if story_data['is_video']:
                    with open(story_data['path'], 'rb') as video:
                        context.bot.send_video(
                            chat_id=user_id, 
                            video=video,
                            caption=message,
                            parse_mode='Markdown'
                        )
                else:
                    with open(story_data['path'], 'rb') as photo:
                        context.bot.send_photo(
                            chat_id=user_id, 
                            photo=photo,
                            caption=message,
                            parse_mode='Markdown'
                        )
            except Exception as media_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(media_error)}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É
                context.bot.send_message(
                    chat_id=user_id,
                    text=message + f"\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: {story_data['url']}",
                    parse_mode='Markdown'
                )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É
            context.bot.send_message(
                chat_id=user_id,
                text=message + f"\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: {story_data['url']}",
                parse_mode='Markdown'
            )
                    
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if os.path.exists(story_data['path']):
                os.remove(story_data['path'])
            if os.path.exists(os.path.dirname(story_data['path'])):
                os.rmdir(os.path.dirname(story_data['path']))
        except Exception as cleanup_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(cleanup_error)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

def send_media(context, user_id, username, item, is_story=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    temp_dir = f"temp_{username}"
    try:
        if is_story:
            cl.story_download(item.pk, target=temp_dir)
        else:
            cl.photo_download(item.pk, target=temp_dir)

        if item.is_video:
            video_path = [f for f in os.listdir(temp_dir) if f.endswith('.mp4')][0]
            context.bot.send_video(chat_id=user_id, 
                                 video=open(f"{temp_dir}/{video_path}", 'rb'))
        else:
            photo_path = [f for f in os.listdir(temp_dir) if f.endswith('.jpg')][0]
            context.bot.send_photo(chat_id=user_id, 
                                 photo=open(f"{temp_dir}/{photo_path}", 'rb'))
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(temp_dir):
            for file in os.listdir(temp_dir):
                os.remove(f"{temp_dir}/{file}")
            os.rmdir(temp_dir)

def resolve_instagram_domain():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ Instagram"""
    try:
        return socket.gethostbyname('i.instagram.com')
    except:
        return None

def cleanup_old_stories():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π"""
    log_bot_action("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π")
    try:
        current_time = time.time()
        with data_lock:
            for user_id in list(last_stories.keys()):
                for username in list(last_stories[user_id].keys()):
                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                    last_stories[user_id][username] = set()
                    save_user_data()
        log_bot_action("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π: {str(e)}")

def load_all_current_stories(update, context):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if isinstance(update, CallbackQuery):
        user_id = str(update.from_user.id)
        status_message = update.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")
    else:
        user_id = str(update.effective_user.id)
        status_message = update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")
    
    log_user_action(user_id, "–ó–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–π")
    
    if not check_subscription(user_id):
        if isinstance(update, CallbackQuery):
            update.edit_message_text(
                "‚ö†Ô∏è –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞",
                reply_markup=get_subscription_keyboard()
            )
        else:
            update.message.reply_text(
                "‚ö†Ô∏è –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞",
                reply_markup=get_subscription_keyboard()
            )
        return

    total_stories = 0
    errors = []
    
    try:
        with ThreadPoolExecutor(max_workers=4) as executor:
            for username in user_subscriptions.get(user_id, []):
                try:
                    log_bot_action("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–π", f"–∞–∫–∫–∞—É–Ω—Ç: {username}")
                    user_id_instagram = cl.user_id_from_username(username)
                    stories = cl.user_stories(user_id_instagram)
                    
                    if not stories:
                        log_bot_action("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π", f"–∞–∫–∫–∞—É–Ω—Ç: {username}")
                        continue
                        
                    log_bot_action("–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏", f"–∞–∫–∫–∞—É–Ω—Ç: {username}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(stories)}")
                    temp_dir = f"temp_{user_id}_{username}"
                    os.makedirs(temp_dir, exist_ok=True)

                    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
                    futures = []
                    for story in stories:
                        future = executor.submit(
                            download_and_send_story,
                            story,
                            username,
                            user_id,
                            temp_dir,
                            context
                        )
                        futures.append(future)

                    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for future in futures:
                        if future.result():
                            total_stories += 1
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–π –æ—Ç {username}")
                finally:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    if os.path.exists(temp_dir):
                        try:
                            for file in os.listdir(temp_dir):
                                os.remove(os.path.join(temp_dir, file))
                            os.rmdir(temp_dir)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_dir}: {str(e)}")

        # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Ç–æ–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        try:
            if total_stories > 0:
                message = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_stories} –∏—Å—Ç–æ—Ä–∏–π!"
                if errors:
                    message += "\n\n‚ö†Ô∏è –ë—ã–ª–∏ –æ—à–∏–±–∫–∏:\n" + "\n".join(errors)
                status_message.edit_text(message, reply_markup=get_back_to_menu_keyboard())
            else:
                if errors:
                    status_message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π:\n" + "\n".join(errors),
                        reply_markup=get_back_to_menu_keyboard()
                    )
                else:
                    status_message.edit_text(
                        "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π",
                        reply_markup=get_back_to_menu_keyboard()
                    )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π",
                reply_markup=get_back_to_menu_keyboard()
            )
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π")

def send_invoice(update, context, plan):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        plan_data = SUBSCRIPTION_PRICES[plan]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
        chat_id = update.message.chat_id if hasattr(update, 'message') else update.callback_query.message.chat_id
        
        context.bot.send_invoice(
            chat_id=chat_id,
            title=plan_data['title'],
            description=plan_data['description'],
            payload=f"sub_{plan}",
            provider_token="",  # –î–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            currency="XTR",    # –ò—Å–ø–æ–ª—å–∑—É–µ–º XTR –¥–ª—è Stars
            prices=[LabeledPrice("Stars", plan_data['price'])],  # –¶–µ–Ω–∞ –≤ Stars (–±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100)
            start_parameter=f"sub_{plan}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        log_bot_action("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ Stars", f"user_id: {chat_id}, plan: {plan}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ Stars: {str(e)}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞"
        if hasattr(update, 'message'):
            update.message.reply_text(error_text)
        else:
            update.callback_query.message.reply_text(error_text)

def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    log_user_action(user_id, "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É", f"–¥–µ–π—Å—Ç–≤–∏–µ: {query.data}")

    try:
        if query.data == 'back_to_menu':
            log_bot_action("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", f"user_id: {user_id}")
            message = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Monitor Bot!\n\n"
                "üîç –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö:\n"
                "üì∏ –ü–æ—Å—Ç–∞—Ö\n"
                "üé• –ò—Å—Ç–æ—Ä–∏—è—Ö\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            query.edit_message_text(text=message, reply_markup=get_main_menu_keyboard())
            query.answer()
        elif query.data == 'subscription_info':
            log_bot_action("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ", f"user_id: {user_id}")
            show_subscription_info(query, context)
        elif query.data == 'load_stories':
            load_all_current_stories(query, context)
        elif query.data == 'add_account':
            query.edit_message_text(
                text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                     "/add username",
                reply_markup=get_back_to_menu_keyboard()
            )
        elif query.data == 'list_subscriptions':
            user_id = str(query.from_user.id)
            subscriptions = user_subscriptions.get(user_id, [])
            
            if not subscriptions:
                message = "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
            else:
                message = "üìã *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
                for i, username in enumerate(subscriptions, 1):
                    message += f"{i}. @{username}\n"
            
            query.edit_message_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=get_back_to_menu_keyboard()
            )
        elif query.data == 'help':
            query.edit_message_text(
                text="üìö *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
                     "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                     "/add username - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
                     "/remove username - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
                     "/list - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
                     "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å",
                parse_mode='Markdown',
                reply_markup=get_back_to_menu_keyboard()
            )
        elif query.data.startswith('sub_'):
            plan = query.data.replace('sub_', '')
            if plan in SUBSCRIPTION_PRICES:
                try:
                    send_invoice(query, context, plan)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
                    query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                return
        
        query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {str(e)}")
        try:
            query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

def pre_checkout_handler(update, context):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        query = update.pre_checkout_query
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        if query.invoice_payload.startswith('sub_'):
            plan = query.invoice_payload.replace('sub_', '')
            if plan in SUBSCRIPTION_PRICES:
                query.answer(ok=True)
                log_bot_action("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", f"user_id: {query.from_user.id}, plan: {plan}")
                return
        query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        if query:
            query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

def successful_payment_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = update.message.successful_payment
        user_id = str(update.effective_user.id)
        plan = payment.invoice_payload.replace('sub_', '')
        
        if plan not in SUBSCRIPTION_PRICES:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω")
            return

        days = {'1month': 30, '3months': 90, '6months': 180, '1year': 365}
        expires = datetime.now() + timedelta(days=days[plan])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        with data_lock:
            if user_id not in user_subscriptions_data:
                user_subscriptions_data[user_id] = {}
            user_subscriptions_data[user_id].update({
                'expires': expires.timestamp(),
                'plan': plan,
                'payment_id': payment.telegram_payment_charge_id
            })
            save_subscription_data()
        
        message = (
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üìÖ –¢–∞—Ä–∏—Ñ: {SUBSCRIPTION_PRICES[plan]['title']}\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires.strftime('%d.%m.%Y')}"
        )
        update.message.reply_text(message, reply_markup=get_main_menu_keyboard())
        log_bot_action("–û—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞", f"user_id: {user_id}, plan: {plan}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

def initialize_files():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data.json
        if not os.path.exists('user_data.json'):
            with open('user_data.json', 'w') as f:
                json.dump({
                    'subscriptions': {},
                    'posts': {},
                    'stories': {}
                }, f)
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª user_data.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è subscriptions.json
        if not os.path.exists('subscriptions.json'):
            with open('subscriptions.json', 'w') as f:
                json.dump({}, f)
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª subscriptions.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users.txt
        if not os.path.exists('users.txt'):
            with open('users.txt', 'w') as f:
                f.write('')
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª users.txt")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

def check_and_refresh_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram"""
    try:
        if not cl.user_id or not cl.sessionid:
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram")
            return auth_instagram()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API
        try:
            cl.get_timeline_feed()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return True
        except Exception as e:
            if 'login_required' in str(e):
                logger.error("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                if os.path.exists('session.json'):
                    os.remove('session.json')
                return auth_instagram()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def auth_instagram(update=None, context=None):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram"""
    try:
        status_message = None
        if update:
            status_message = update.message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Instagram...")

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
        if os.path.exists('session.json'):
            os.remove('session.json')
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
        cl.set_device({
            "app_version": "269.0.0.18.75",
            "android_version": "28",
            "android_release": "9.0",
            "dpi": "480dpi",
            "resolution": "1080x2034",
            "manufacturer": "OnePlus",
            "device": "ONEPLUS A6013",
            "model": "OnePlus 6T",
            "cpu": "qcom",
            "version_code": "314665256"
        })
        
        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        cl.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
        cl.dump_settings('session.json')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        cl.get_timeline_feed()
        
        message = "‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Instagram"
        logger.info(message)
        if status_message:
            status_message.edit_text(message, reply_markup=get_back_to_menu_keyboard())
        return True

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram: {str(e)}"
        logger.error(error_message)
        if os.path.exists('session.json'):
            os.remove('session.json')
        if status_message:
            status_message.edit_text(error_message, reply_markup=get_back_to_menu_keyboard())
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
        keep_alive()
        logger.info("Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        initialize_files()
        load_user_data()
        load_subscription_data()
        logger.info("–§–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Instagram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Instagram...")
        if not check_and_refresh_auth():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Instagram. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Instagram")

        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help_command))
        dp.add_handler(CommandHandler("add", add_account))
        dp.add_handler(CommandHandler("remove", remove_account))
        dp.add_handler(CommandHandler("list", list_subscriptions))
        dp.add_handler(CommandHandler("loadstories", load_all_current_stories))
        dp.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        updater.job_queue.run_repeating(check_new_content, interval=600, first=10)
        updater.job_queue.run_repeating(lambda ctx: cleanup_old_stories(), interval=7200, first=7200)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        updater.start_polling(timeout=30, drop_pending_updates=True)
        updater.idle()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == '__main__':
    keep_alive()
    main()
